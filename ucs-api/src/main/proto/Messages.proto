syntax = "proto2";

option java_package = "com.ugcs.ucs.proto";
option java_outer_classname = "MessagesProto";
option (ugcs_protocol_major_version) = 1;
option (ugcs_protocol_minor_version) = 17;

import "Options.proto";
import "Domain.proto";

// Types (DTO)

enum TelemetryFormat {
	TF_TLM = 0;
	TF_CSV = 1;
	TF_KML = 2;
}

message Wgs84LocationDto {
	required double latitude = 1;
	required double longitude = 2;
	required double altitude = 3;
	required AltitudeType altitudeType = 4; 
}

message MeasurePointDto {
	required double latitude = 1;
	required double longitude = 2;
	required double altitude = 3;
	required AltitudeType altitudeType = 4; 
	optional double angle = 5;
	optional double distance = 6; 
}

message PlaceDto {
	required Wgs84LocationDto location = 1;
	optional string displayName = 2;
	optional double rank = 3;
}

message VersionInfoDto {
	required Version version = 1;
	required int64 releaseDate = 2 [(ugcs_field_posix_time) = true];
	optional string releaseInfo = 3;
}

message VersionsInfoDto {
	repeated VersionInfoDto versions = 1;
	optional string releaseInfo = 2;
}

message StatisticsRecordDto {
	required string parameter = 1;
	required string value = 2;
}

message StatisticsDto {
	required int64 time = 1;
	required string clientUID = 2;
	required string clientMAC = 3;
	required string clientOsType = 4;
	required string clientOsVersion = 5;
	required string unityVersion = 6; 	
	repeated StatisticsRecordDto details = 7; 
}

message CommandSetDto {
	repeated string commandCode = 1;
}

message LicensePermissionsDto {
	required string licenseName = 1;
	required int32 maxAuthenticatedHciSessions = 2;
	required bool multinode = 3;
	required bool kmlImport = 4;
	required bool demImport = 5;
	required bool groupOperations = 6;
	repeated PlatformAndDoublePairDto maxAglAltitude = 7;
	repeated PlatformAndDoublePairDto maxDistanceToHome = 8;
	repeated PlatformAndIntegerPairDto  maxBuildings = 9;
	repeated PlatformAndBooleanPairDto adsbReceiver = 12;
	repeated PlatformAndBooleanPairDto videoRecording = 13;
	repeated PlatformAndBooleanPairDto cameraFootprint = 14;
	repeated PlatformAndBooleanPairDto adsbTransponder = 15;
	repeated string forbiddenAlgorithmCodes = 16;
	required int32 maxImagesToProcess = 17;
	required bool remoteVsmConnection = 18;
	required bool ugcsVideoPlayer = 19;
	required bool kmlExport = 20;
	optional int32 vehicleConnectionsLimit = 21;
	optional bool dssClient = 22 [default = false];
	repeated string forbiddenCommandCodes = 23;
  required bool smartAgl = 24;
	required int32 djiPilotConnectionsLimit = 25;
}

message PlatformAndBooleanPairDto {
	required Platform platform = 1;
	required bool value = 2;
}

message PlatformAndIntegerPairDto {
	required Platform platform = 1;
	required int32 value = 2;
}

message PlatformAndDoublePairDto {
	required Platform platform = 1;
	required double value = 2;
}

message VehicleCommandResultDto {
	required Vehicle vehicle = 1;
	required CommandStatus commandStatus = 2;
	optional string errorMessage = 3;
}

message ImportRouteParameterDto {
	required string algorithmClass = 1;
	required string parameterName = 2;
	required string parameterValue = 3;
}

// Mapping

message AlgorithmsMappingDto {
	repeated AlgorithmsDto algorithms = 1;
}

message FailsafeActionsMappingDto {
	repeated FailsafeActionsDto failsafeActions = 1;
}

message TurnTypesMappingDto {
	repeated PlatformTurnTypeDto platformTurnTypes = 1;
}

message ActionExecutionsMappingDto {
	repeated AlgorithmActionExecutionDto algorithmActionExecutions = 1;
}

message CamerasMappingDto {
	repeated ProfileCameraDto profileCameras = 1;
}

message AltitudeTypesMappingDto {
	repeated AltitudeTypeDto altitudeTypes = 1;
}

message FacadeScanPatternsMappingDto {
	repeated FacadeScanPatternDto facadeScanPatterns = 1;
}

message AltitudeFramesMappingDto {
	repeated PlatformAltitudeFramesDto platformAltitudeFrames = 1;
	repeated AlgorithmAltitudeFramesDto algorithmAltitudeFrames = 2;
}

message PlatformParametersDto {
	required PlatformAndVehicleTypePairDto platformAndVehicleType = 1;
	required PlatformParameters parameters = 2;
}

message PayloadParametersMappingDto {
	required PayloadType payloadType = 1;
	repeated PayloadParameterType parameterTypes = 2;
}

// Keys and values

message PlatformAndVehicleTypePairDto {
	required Platform platform = 1;
	required VehicleType vehicleType = 2;
}

message FailsafeReasonActionsDto {
	required FailsafeReason reason = 1;
	repeated FailsafeAction actions = 2;
}

message FailsafeActionsDto {
	required PlatformAndVehicleTypePairDto platformAndVehicleType = 1;
	repeated FailsafeReasonActionsDto failsafeReasonActions = 2;
}

message AlgorithmAndActionCodeDto {
	required TraverseAlgorithm algorithm= 1;
	repeated ActionCode actionCodes = 2;
}

message AlgorithmsDto {
	required PlatformAndVehicleTypePairDto platformAndVehicleType = 1;
	repeated AlgorithmAndActionCodeDto algorithmAndActionCodes = 2;
}

message TurnTypeDto {
	required string turnType = 1;
	required string description = 2;
}

message PlatformTurnTypeDto {
	required PlatformAndVehicleTypePairDto platformAndVehicleType = 1;
	repeated TurnTypeDto turnTypes = 2;
}

message AltitudeTypeDto {
	required string altitudeType = 1;
	required string description = 2;
}

message AltitudeFrameDto {
	required string altitudeFrame = 1;
	required string description = 2;
}

message PlatformAltitudeFramesDto {
	required Platform platform = 1;
	repeated AltitudeFrameDto altitudeFrames = 2;
}

message AlgorithmAltitudeFramesDto {
	required TraverseAlgorithm algorithm = 1;
	repeated AltitudeFrameDto altitudeFrames = 2;
}

message FacadeScanPatternDto {
	required string facadeScanPattern = 1;
	required string description = 2;
}

message ActionExecutionDto {
	required string actionExecution = 1;
	required string description = 2;
}

message AlgorithmActionExecutionDto {
	required TraverseAlgorithm algorithm = 1;
	repeated ActionExecutionDto actionExecution = 2;
}

message CameraDto {
	required int32 cameraId = 1;
	required string cameraName = 2;
	optional string cameraShortName = 3;
}

message ProfileCameraDto {
	required int32 profileId = 1;
	repeated CameraDto cameras = 2;
}

message VehicleCommandsDto {
	optional Vehicle vehicle = 1;
	repeated Command commands = 2;
}

// Messages

message Error {
	optional string errorMessage = 1;
	optional int32 errorCode = 2;
	optional bool isSuppressible = 3;
	optional ErrorDetailWrapper errorDetail = 4;
}

message AuthorizeHciRequest {
	required int32 clientId = 1 [default = -1];
	optional string locale = 2;
	optional ProtocolVersion clientVersion = 3;
}

message AuthorizeHciResponse {
	required int32 clientId = 1;
	optional ProtocolVersion serverVersion = 2;
}

message SetHciLocaleRequest {
	required int32 clientId = 1;
	required string locale = 2;
}

message SetHciLocaleResponse {
}

message LoginRequest {
	required int32 clientId = 1;
	required string userLogin = 2;
	required string userPassword = 3;
}

message LoginResponse {
	required User user = 1;
}

message LogoutRequest {
	required int32 clientId = 1;
}

message LogoutResponse {
}

message CheckLocationRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	required Wgs84LocationDto location = 3;
}

message CheckLocationResponse {
	required bool passable = 1;
	optional string message = 2;
}

message ProcessRouteRequest {
	required int32 clientId = 1;
	required Route route = 2;
}

message ProcessRouteResponse {
	required ProcessedRoute processedRoute = 1;
}

// deprecated
message ConvertRouteAltitudesRequest {
	required int32 clientId = 1;
	required Route route = 2;
	required AltitudeType altitudeType = 4;
}

message ConvertRouteAltitudesResponse {
	required Route route = 1;
}

message ChangeRouteVehicleProfileRequest {
	required int32 clientId = 1;
	required Route route = 2;
	required VehicleProfile newProfile = 3;
}

message ChangeRouteVehicleProfileResponse {
	required Route route = 1;
	repeated string warningMessage = 2;
}

message GetParametersSelectionValuesRequest {
	required int32 clientId = 1;
	required Route route = 2;
	required TraverseAlgorithm algorithm = 3;
}

message GetParametersSelectionValuesResponse {
	repeated Selection selections = 1;
}

message GetElevationProfileRequest {
	required int32 clientId = 1;
	required double samplingStep = 3;
	repeated Wgs84LocationDto locations = 4;
	optional int32 number = 5;
}

message GetElevationProfileResponse {
	repeated Wgs84LocationDto locations = 1;
	repeated double elevations = 2;
	repeated double obstacleHeight = 3;
}

message GetElevationProfileV2Request {
	required int32 clientId = 1;
	required double samplingStep = 3;
	repeated Wgs84LocationDto locations = 4;
	optional int32 number = 5;
}

message GetElevationProfileV2Response {
	repeated Wgs84LocationDto locations = 1;
	repeated double elevations = 2;
	repeated double obstacleHeight = 3;
	repeated double accumulatedDistances = 4;
}

message CalculateSplineRequest {
	required int32 clientId = 1;
	repeated Waypoint waypounts = 2;
	optional double accuracy = 3;
}

message CalculateSplineResponse {
	repeated Wgs84LocationDto locations = 1;
}

message ImportMissionOrRouteFromUgcsRequest {
	required int32 clientId = 1;
	required bytes data = 2;
}

message ImportMissionOrRouteFromUgcsResponse {
	optional Mission mission = 1;
	optional Route route = 2;
}

message ImportMissionFromUgcsRequest {
	required int32 clientId = 1;
	required bytes data = 2;
}

message ImportMissionFromUgcsResponse {
	required Mission mission = 1;
}

message ImportRouteFromUgcsRequest {
	required int32 clientId = 1;
	required bytes data = 2;
}

message ImportRouteFromUgcsResponse {
	required Route route = 1;
}

message ImportProfilesFromUgcsRequest {
	required int32 clientId = 1;
	required bytes data = 2;
}

message ImportProfilesFromUgcsResponse {
	repeated ImportedVehicleProfile vehicleProfiles = 1;
	repeated ImportedPayloadProfile payloadProfiles = 2;
	repeated ImportedVehicleProfile skippedVehicleProfiles = 3;
	repeated ImportedPayloadProfile skippedPayloadProfiles = 4;
}

message ImportRouteFromCsvRequest {
	required int32 clientId = 1;
	required bytes data = 2;
}

message ImportRouteFromCsvResponse {
	required Route route = 1;
}

message ImportRouteFromKmlRequest {
	required int32 clientId = 1;
	required bytes data = 2;
	required TraverseAlgorithm lineAlgorithm = 3;
	required TraverseAlgorithm polygonAlgorithm = 4;
}

message ImportRouteFromKmlResponse {
	required Route route = 1;
}

message ExportMissionToUgcsRequest {
	required int32 clientId = 1;
	required Mission mission = 2;
}

message ExportMissionToUgcsResponse {
	required bytes data = 1;
}

message ExportRouteToUgcsRequest {
	required int32 clientId = 1;
	required Route route = 2;
}

message ExportRouteToUgcsResponse {
	required bytes data = 1;
}

message ExportProfilesToUgcsRequest {
	required int32 clientId = 1;
	repeated VehicleProfile vehicleProfiles = 2;
	repeated PayloadProfile payloadProfiles = 3;
}

message ExportProfilesToUgcsResponse {
	required bytes data = 1;
}

message ExportRouteToKmlRequest {
	required int32 clientId = 1;
	optional ProcessedRoute route = 2;
	required KmlExportAltitudeMode altitudeMode = 3;
}

message ExportRouteToKmlResponse {
	required bytes kmlData = 1;
}

message ExportRouteToWpmlRequest {
	required int32 clientId = 1;
	required ProcessedRoute route = 2;
	required WpmlExportAltitudeMode altitudeMode = 3;
}

message ExportRouteToWpmlResponse {
	required bytes routeData = 1;
}

// Deprecated. Use specific ExportRouteTo[FORMAT] message
message ExportRouteRequest {
	option deprecated = true;
	required int32 clientId = 1;
	required Route route = 2;
}

message ExportRouteResponse {
	option deprecated = true;
	required bytes routeData = 1;
}

// Deprecated. Use specific ImportRouteFrom[FORMAT] message
message ImportRouteRequest {
	option deprecated = true;
	required int32 clientId = 1;
	required bytes routeData = 2;
	required string filename = 3;
	optional TraverseAlgorithm polygonAlgorithm = 4;
	repeated ImportRouteParameterDto parameters = 5;
	optional TraverseAlgorithm lineAlgorithm = 6;
}

message ImportRouteResponse {
	option deprecated = true;
	required Route route = 1;
}

// Deprecated. Use specific ExportMissionTo[FORMAT] message
message ExportMissionRequest {
	option deprecated = true;
	required int32 clientId = 1;
	required Mission mission = 2;
}

message ExportMissionResponse {
	option deprecated = true;
	required bytes missionData = 1;
}

// Deprecated. Use specific ImportMissionFrom[FORMAT] message
message ImportMissionRequest {
	option deprecated = true;
	required int32 clientId = 1;
	required bytes missionData = 2;
	optional string filename = 3;

}

message ImportMissionResponse {
	option deprecated = true;
	required Mission mission = 1;
}

message ExportTelemetryRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	// defines a lower bound limit for a telemetry time
	// time >= from
	optional int64 from = 3;
	// defines an upper bound limit for a telemetry time
	// time < from
	optional int64 to = 4;
	// format of the serialized telemetry data
	required TelemetryFormat format = 5 [default = TF_TLM];
}

message ExportTelemetryResponse {
	// telemetry data in a requested format
	required bytes data = 1;
}

message ImportTelemetryRequest {
	required int32 clientId = 1;
	// telemetry data in a tlm binary format
	required bytes data = 2;
}

message ImportTelemetryResponse {
	// list of vehicles affected by the telemetry import
	repeated Vehicle vehicles = 1;
}

message ExportTelemetryStreamRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	// defines a lower bound limit for a telemetry time
	// time >= from
	optional int64 from = 3;
	// defines an upper bound limit for a telemetry time
	// time < from
	optional int64 to = 4;
	// format of the serialized telemetry data
	required TelemetryFormat format = 5 [default = TF_TLM];
}

message ExportTelemetryStreamResponse {
	// there is a single stream opened within the operation
	// that contains telemetry data in a requested format
}

message ImportTelemetryStreamRequest {
	required int32 clientId = 1;
	// id of the telemetry data stream in a tlm binary format
	required string streamId = 2;
}

message ImportTelemetryStreamResponse {
	// list of vehicles affected by the telemetry import
	repeated Vehicle vehicles = 1;
}

// Measuring

message GetLineOfSightRequest {
	required int32 clientId = 1;
	required MeasurePointDto observerPosition = 2;
	required double maxDistance = 3;
	required int32 approxPointsNumber = 4;
}

message GetLineOfSightResponse {
	repeated MeasurePointDto points = 1;
}

// NFZ

message GetNfzListRequest {
	required int32 clientId = 1;
	required double minLatitude = 2;
	required double minLongitude = 3;
	required double maxLatitude = 4;
	required double maxLongitude = 5;
	optional bool refreshDependencies = 6 [default = false];
	repeated string refreshExcludes = 7;
	repeated NfzType types = 8;
}

message GetNfzListResponse {
	repeated NoFlightZone zones = 1;
}

message GetRasterGridRequest {
	required int32 clientId = 1;
	required double minLatitude = 3;
	required double minLongitude = 4;
	required double maxLatitude = 5;
	required double maxLongitude = 6;
	required int32 width = 7;
	required int32 height = 8;
}

message GetRasterGridResponse {
	repeated float values = 1;
	required int32 width = 2;
	required int32 height = 3;
	required bool noData = 4;
}

//Request for elevation tiles in specified rectangle
message GetElevationTilesRequest {
	option deprecated = true;
	required int32 clientId = 1;
	required double minLatitude = 3;
	required double minLongitude = 4;
	required double maxLatitude = 5;
	required double maxLongitude = 6;
}

message GetElevationTilesResponse {
	option deprecated = true;
	repeated ElevationData data = 1;
}

//Request for elevation tiles in specified rectangle
message GetElevationTilesV2Request {
	required int32 clientId = 1;
	required double minLatitude = 3;
	required double minLongitude = 4;
	required double maxLatitude = 5;
	required double maxLongitude = 6;
}

message GetElevationTilesV2Response {
	repeated ElevationData data = 1;
}

message GetRasterValuesRequest {
	required int32 clientId = 1;
	repeated double latitudes = 3;
	repeated double longitudes = 4;
}

message GetRasterValuesResponse {
	repeated float values = 1;
	required bool noData = 2;
}

message SwapElevationOrderRequest {
	required int32 clientId = 1;
	required ElevationSource source1 = 2;
	required ElevationSource source2 = 3;
}

message SwapElevationOrderResponse {
}

message GetTelemetryRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	required int64 fromTime = 3;
	optional int64 toTime = 4;
	optional int32 limit = 5 [default = 7200];
}

message GetTelemetryResponse {
	optional int64 nextTelemetryTime = 2;
	repeated Telemetry telemetry = 3;
}

message DeleteTelemetryRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	optional int64 fromTime = 3;
	optional int64 toTime = 4;
}

message DeleteTelemetryResponse {
}

message TraceTelemetryFramesRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	required int64 originTime = 3;
	required double interval = 4;
	required int32 number = 5;
}

message TraceTelemetryFramesResponse {
	repeated CommandSetDto commandFrames = 2;
}

message CountTelemetryRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	optional int64 fromTime = 3;
	optional int64 toTime = 4;
	optional bool estimateTLogSize = 5 [default = false];
}

message CountTelemetryResponse {
	required int64 count = 1;
	optional int64 tLogSize = 2;
}

message GetLocationPassingTimeRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	required int64 fromTime = 3;
	required int64 toTime = 4;
	required Wgs84LocationDto location = 5;
}

message GetLocationPassingTimeResponse {
	required int64 time = 1;
}

// search for a telemetry tracks
// in a given range: start time in [from, to)
message GetVehicleTracksRequest {
	required int32 clientId = 1;
	// target vehicle
	repeated Vehicle vehicles = 2;
	// defines a lower bound limit for a track start time
	// start time >= from
	optional int64 from = 3;
	// defines an upper bound limit for a track start time
	// start time < from
	optional int64 to = 4;
	// max number of a resulting tracks
	required int32 limit = 6 [default = 7];
}

message GetVehicleTracksResponse {
	// tracks sorted in a descending order (by start time)
	repeated VehicleTrack vehicleTracks = 1;
}

// remove a track
message DeleteVehicleTrackRequest {
	required int32 clientId = 1;
	required VehicleTrack vehicleTrack = 2;
}

message DeleteVehicleTrackResponse {
}

// merge the given track with a previous one
// of the same vehicle
message MergeVehicleTrackRequest {
	required int32 clientId = 1;
	required VehicleTrack vehicleTrack = 2;
}

message MergeVehicleTrackResponse {
	// merged track
	required VehicleTrack vehicleTrack = 2;
}

// split given track to a two by specified date
message SplitVehicleTrackRequest {
	required int32 clientId = 1;
	required VehicleTrack vehicleTrack = 2;
	required int64 splitTime = 3;
}

message SplitVehicleTrackResponse {
	//track before split date
	required VehicleTrack first = 1;
	//track after split date
	required VehicleTrack second = 2;
}

//Deprecated. Use ExportRouteToKmlRequest
message GetKmlRouteRepresentationRequest {
	required int32 clientId = 1;
	required string routeName = 2;
	required VehicleProfile routeVehicleProfile = 3;
	repeated Wgs84LocationDto waypoints = 4;
	required KmlExportAltitudeMode altitudeMode = 5;
}
//Deprecated
message GetKmlRouteRepresentationResponse {
	required bytes kmlData = 1;
}

message GetAdsbAircraftListRequest {
	required int32 clientId = 1;
	required Wgs84LocationDto location = 2;
	required double radius = 3;
	required double height = 4;
}

message GetAdsbAircraftListResponse {
	repeated AdsbAircraft aircrafts = 1;
}

message SearchPlacesRequest {
	required int32 clientId = 1;
	required string query = 2;
	required int32 limit = 3 [default = 7];
}

message SearchPlacesResponse {
	repeated PlaceDto places = 1;
}

message GetVehicleLogRequest {
	required int32 clientId = 1;
	repeated Vehicle vehicles = 2;
	optional int32 limit = 3 [default = 15];
	optional SeverityLevel level = 4 [default = SL_INFORMATIONAL];
	optional int64 fromTime = 5;
	optional bool reverseOrder = 6 [default = false];
}

message GetVehicleLogResponse {
	repeated VehicleLogEntry vehicleLogEntries = 1;
}

message GetVehicleLogByTimeRangeRequest {
	required int32 clientId = 1;
	repeated Vehicle vehicles = 2;
	required int64 fromTime = 3;
	required int64 toTime = 4;
	// deprecated
	optional SeverityLevel level = 5 [default = SL_INFORMATIONAL];
}

message GetVehicleLogByTimeRangeResponse {
	repeated VehicleLogEntry vehicleLogEntries = 1;
}

// deprecated
message GetVehicleVideoLogRequest {
	required int32 clientId = 1;
	repeated Vehicle vehicles = 2;
	required int64 fromTime = 3;
	required int64 toTime = 4;
}

// deprecated
message GetVehicleVideoLogResponse {
	repeated VehicleLogEntry vehicleLogEntries = 1;
}

message SendCommandRequest {
	required int32 clientId = 1;
	optional Command command = 2;
	repeated Vehicle vehicles = 3;
	optional int64 interDelay = 4 [default = 0];
	repeated VehicleCommandsDto commands = 5;
}

message SendCommandResponse {
	repeated VehicleCommandResultDto commandResults = 1;
}

message UploadRouteRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	required ProcessedRoute processedRoute = 3;
	optional int32 startIndex = 4;
	optional bool addFirstWaypoint = 5 [default = true];
	// if startLocation != null -> startAction != null
	// startLocation strictly before startAction
	optional Wgs84LocationDto startLocation = 6;
	repeated int32 suppressErrorCodes = 7;
}

message UploadRouteResponse {
}

message GetNativeRouteRequest {
	required int32 clientId = 1;
	required ProcessedRoute processedRoute = 2;
	required VehicleProfile vehicleProfile = 3;
}

message GetNativeRouteResponse {
	required bytes nativeRoute = 1;
}

message GetAdsbBulbStatusRequest {
	required int32 clientId = 1;
}

message GetAdsbBulbStatusResponse {
	required bool on = 1;
}

// Licensing and Version control

message GetLicenseRequest {
	required int32 clientId = 1;
}

message GetLicenseResponse {
	repeated License licenses = 1;
	required LicensePermissionsDto licensePermissions = 2;
	optional string noLicenseMessage = 3;
}

message ActivateLicenseRequest {
	required int32 clientId = 1;
	required string activationCode = 2;
}

message ActivateLicenseResponse {
	optional License license = 1;
}

message DeactivateLicenseRequest {
	required int32 clientId = 1;
	required string activationCode = 2;
}

message DeactivateLicenseResponse {
}

message CheckForUpdatesRequest {
	required int32 clientId = 1;
	/* The result will contain only versions newer than this one. */
	optional Version since = 2;
}

message CheckForUpdatesResponse {
	optional VersionsInfoDto newVersions = 1;
}

message GetChangelogRequest {
	required int32 clientId = 1;
  required Version version = 2;
}

message GetChangelogResponse {
  optional string changelog = 3;
}

message IsTelemetryFieldRegisteredRequest {
	required int32 clientId = 1;
	required Vehicle vehicle = 2;
	required string fieldCode = 3;
	required Subsystem subsystem = 4;
	// If -1, method returns true if any of instances has the field registered.
	// proto2 doesn't support nullable int32
	required int32 subsystemId = 5;
}

message IsTelemetryFieldRegisteredResponse {
	required bool registered = 1;
}

// Statistics
message SendStatisticsRequest {
	required int32 clientId = 1;
	required StatisticsDto statistics = 2;
}

message SendStatisticsResponse {
	required bool accepted = 1;
}

// Generic CRUD services

// GetObject & CreateOrUpdateObject specifics:
// If refreshDependencies field is set to false (default), object references 
// WILL NOT be initialized, even if they exist. Should be used in cases,
// that don't access dependencies data to reduce processing overhead.
// If withComposites field is set to true, domain object references,
// marked as composite references would also be affected by update operations,
// such as CreateOrUpdate and Delete

message GetObjectListRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	optional bool refreshDependencies = 3 [default = false];
	repeated string refreshExcludes = 4;
	optional bool translate = 5 [default = true];
}

message GetObjectListResponse {
	required string objectType = 1;
	repeated DomainObjectWrapper objects = 2;
}

message GetObjectRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required int32 objectId = 3;
	optional bool refreshDependencies = 4 [default = false];
	repeated string refreshExcludes = 5;
	optional bool translate = 6 [default = true];
}

message GetObjectResponse {
	required string objectType = 1;
	required DomainObjectWrapper object = 2;
}

message CreateOrUpdateObjectRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required DomainObjectWrapper object = 3;
	optional bool withComposites = 4 [default = true];
	optional bool acquireLock = 5 [default = false];
}

message CreateOrUpdateObjectResponse {
	required string objectType = 1;
	required DomainObjectWrapper object = 2;
}

message UpdateObjectFieldsRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required DomainObjectWrapper object = 3;
	repeated string fieldNames = 4;
	optional bool acquireLock = 5 [default = false];
}

message UpdateObjectFieldsResponse {
	required string objectType = 1;
	required DomainObjectWrapper object = 2;
}

message DeleteObjectRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required int32 objectId = 3;
}

message DeleteObjectResponse {
	required string objectType = 1;
	required int32 objectId = 2;
	optional int32 objectVersion = 3;
}

message GetMappingRequest {
	required int32 clientId = 1;
	optional bool getAlgorithms = 2;
	optional bool getFailsafeActions = 3;
	optional bool getWaypointTurnTypes = 4;
	optional bool getActionExecutions = 5;
	optional bool getCameras = 6;
	optional bool getAltitudeTypes = 7;
	optional bool getFacadeScanPatterns = 9;
	optional bool getAltitudeFrames = 10;
	optional bool getPlatformParameters = 11;
	optional bool getPayloadParameters = 12;
}

message GetMappingResponse {
	required int32 clientId = 1;
	optional AlgorithmsMappingDto algorithmsMapping = 2;
	optional FailsafeActionsMappingDto failsafeActionsMapping = 3;
	optional TurnTypesMappingDto waypointTurnTypesMapping = 4;
	optional ActionExecutionsMappingDto actionExecutionsMapping = 5;
	optional CamerasMappingDto camerasMapping = 6;
	optional AltitudeTypesMappingDto altitudeTypesMapping = 7;
	optional FacadeScanPatternsMappingDto facadeScanPaterrnsMapping = 9;
	optional AltitudeFramesMappingDto altitudeFramesMapping = 10;
	repeated PlatformParametersDto platformParameters = 11;
	repeated PayloadParametersMappingDto payloadParameters = 12;
}

// Locks

message AcquireLockRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required int32 objectId = 3;
}

message AcquireLockResponse {
}

message ReleaseLockRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required int32 objectId = 3;
	optional bool ifExclusive = 4 [default = false];
}

message ReleaseLockResponse {
}

message CheckLockRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	required int32 objectId = 3;
}

message CheckLockResponse {
	required string objectType = 1;
	required int32 objectId = 2;
	optional Lock lock = 3; // null if object is free
}

message CheckMultipleLocksRequest {
	required int32 clientId = 1;
	required string objectType = 2;
	repeated int32 objectIds = 3;
}

message CheckMultipleLocksResponse {
	required string objectType = 1;
	repeated int32 objectIds = 2;
	repeated Lock locks = 3;
}

message GetMissionPreferencesRequest {
	required int32 clientId = 1;
	required User user = 2;
	optional Mission mission = 3;
}

message GetMissionPreferencesResponse {
	repeated MissionPreference preferences = 1;
}

message UpdateMissionPreferencesRequest {
	required int32 clientId = 1;
	repeated MissionPreference preferences = 2;
}

message UpdateMissionPreferencesResponse {
}

message SubmitUtmOperationRequest {
	required int32 clientId = 1;
	required UtmOperation utmOperation = 2;
	required ProcessedRoute processedRoute = 3;
}

message SubmitUtmOperationResponse {
	required UtmOperation utmOperation = 1;
}

message GetCapabilitiesRequest {
	required int32 clientId = 1;
}

message GetCapabilitiesResponse {
	required bool utm = 1 [default = false];
}

message GetPolygonAreaRequest {
	required int32 clientId = 1;
	repeated Wgs84LocationDto points = 2;
}

message GetPolygonAreaResponse {
	required double area = 1;
}

// Route transformations

message SplitRouteBySegmentsRequest {
	required int32 clientId = 1;
	required Route route = 2;
	repeated int32 segmentIndices = 3;
	required double overshoot = 4 [default = 10.0];
}

message SplitRouteBySegmentsResponse {
	repeated Route parts = 1;
}

message SplitRouteByDistanceRequest {
	required int32 clientId = 1;
	required Route route = 2;
	required double distance = 4;
	required double tolerance = 5 [default = 10.0];
	required double overshoot = 6 [default = 10.0];
	required int32 limit = 7 [default = 2];
}

message SplitRouteByDistanceResponse {
	repeated Route parts = 1;
}

message SplitRouteByCorridorPointRequest {
	required int32 clientId = 1;
	required Route route = 2;
	required int32 segmentIndex = 3;
	required int32 pointIndex = 4;
}

message SplitRouteByCorridorPointResponse {
	repeated Route parts = 1;
}

message JoinRouteRequest {
	 required int32 clientId = 1;
	 repeated Route parts = 2;
	 //deprecated
	 required bool mergeEndpoints = 3 [default = true];
}

message JoinRouteResponse {
	required Route route = 1;
}

message ReconstructRouteRequest {
	required int32 clientId = 1;
	required ProcessedRoute processedRoute = 2;
}

message ReconstructRouteResponse {
	required Route route = 1;
}

// Operations

message OperationStatus {
	repeated ProgressDto progressStack = 1;
}

message OperationStream {
	required string streamId = 1;
	// empty chunk denotes end of stream
	required bytes chunk = 2;
}

message OperationStreamRequest {
	required string streamId = 1;
	required int32 chunkLength = 2;
}

message CancelOperationRequest {
	required int32 requestId = 1;
}

message CancelOperationResponse {
}

// Events

message Notification {
	required int32 subscriptionId = 1;
	required EventWrapper event = 2;
}

message SubscribeEventRequest {
	required int32 clientId = 1;
	required EventSubscriptionWrapper subscription = 2;
}

message SubscribeEventResponse {
	required int32 subscriptionId = 1;
}

message UnsubscribeEventRequest {
	required int32 clientId = 1;
	required int32 subscriptionId = 2;
}

message UnsubscribeEventResponse {
}

message GetTelemetrySnapshotRequest {
	required int32 clientId = 1;
	// list of vehicles to get snapshots for
	repeated Vehicle vehicles = 2;
}

message GetTelemetrySnapshotResponse {
	// list of vehicle telemetry snapshots
	repeated TelemetrySnapshot snapshots = 1;
}


message SendFeedbackRequest {
	required int32 clientId = 1;
	// Optional.
	optional string ReporterFullName = 2;
	// Optional.
	optional string ReporterEmail = 3;
	// Required not empty string, 255 symbols maximum.
	optional string Summary = 4;
	// Optional.
	optional string Details = 5;
}

message SendFeedbackResponse {
}